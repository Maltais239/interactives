<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Canadian Geography Challenge</title>
  <link
    rel="stylesheet"
    href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
    crossorigin=""
  />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body, html { 
      margin: 0; 
      padding: 0; 
      width: 100%; 
      height: 100%; 
      display: flex; 
      font-family: 'Poppins', sans-serif;
      background-color: #f0f4f8;
      overflow: hidden;
    }
    #map { 
      flex: 1; 
      height: 100%;
      border-right: 1px solid #ddd;
      background-color: #aadaff;
    }
    #info-panel {
      width: 380px;
      max-width: 40%;
      padding: 2rem;
      background: linear-gradient(135deg, #ffffff 0%, #f1f5f9 100%);
      border-left: 5px solid #d91e2a; /* Canadian Red */
      overflow-y: auto;
      box-shadow: -5px 0 15px rgba(0,0,0,0.1);
      display: flex;
      flex-direction: column;
    }
    #info-panel h2 { 
      margin-top: 0; 
      color: #374151; 
      font-size: 1.75rem; 
      font-weight: 700;
      border-bottom: 2px solid #ef4444;
      padding-bottom: 0.5rem;
      margin-bottom: 1rem;
    }
    
    .mode-switcher {
        display: flex;
        margin-bottom: 1rem;
        border-radius: 8px;
        background-color: #fee2e2;
        padding: 0.25rem;
    }
    .mode-btn {
        flex: 1;
        padding: 0.75rem 0.5rem;
        border: none;
        background-color: transparent;
        color: #b91c1c;
        font-size: 0.9rem;
        font-weight: 600;
        cursor: pointer;
        border-radius: 6px;
        transition: background-color 0.3s, color 0.3s;
    }
    .mode-btn.active {
        background-color: #ef4444;
        color: white;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .quiz-type-switcher {
        display: flex;
        margin-bottom: 1.5rem;
        border-radius: 8px;
        background-color: #e5e7eb;
        padding: 0.25rem;
    }
    .quiz-type-btn {
        flex: 1;
        padding: 0.5rem;
        border: none;
        background: transparent;
        color: #4b5563;
        font-size: 0.85rem;
        font-weight: 600;
        cursor: pointer;
        border-radius: 6px;
        transition: all 0.3s;
    }
    .quiz-type-btn.active {
        background-color: #4b5563;
        color: white;
    }

    .mode-panel { display: none; }
    .mode-panel.active { display: block; }

    #info-content h3, #result-box h3 { 
      margin-top: 0;
      margin-bottom: 1rem; 
      color: #b91c1c; 
      font-size: 1.5rem; 
      font-weight: 600;
    }
     #info-content p, #result-box p { 
      font-size: 1rem; 
      line-height: 1.6; 
      margin: 0.5rem 0 1rem 0; 
      color: #374151;
    }
     #info-content p strong, #result-box p strong { color: #991b1b; }
    
    #question-box {
      background-color: #fff1f2;
      border-radius: 8px;
      padding: 1.5rem;
      margin-bottom: 1.5rem;
      border: 1px solid #fecaca;
      min-height: 100px;
      font-size: 1.1rem;
      color: #881337;
      line-height: 1.6;
      font-weight: 500;
    }

    #result-box {
        border-top: 1px solid #ddd;
        padding-top: 1.5rem;
    }
    #result-box p.feedback-correct { color: #166534; font-weight: bold; }
    #result-box p.feedback-incorrect { color: #991b1b; font-weight: bold; }
    
    #button-controls {
        margin-top: auto;
        padding-top: 1rem;
        display: flex;
        gap: 0.5rem;
    }
    .game-btn {
        flex: 1;
        padding: 0.75rem;
        color: white;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.2s, opacity 0.2s;
    }
    #next-question-btn { display: none; background-color: #dc2626; }
    #next-question-btn:hover { background-color: #b91c1c; }
    #hint-btn { display: none; background-color: #f59e0b; }
    #hint-btn:hover { background-color: #d97706; }
    #hint-btn:disabled { background-color: #a1a1aa; cursor: not-allowed; }
    #play-again-btn { display: none; background-color: #16a34a; }
    #play-again-btn:hover { background-color: #15803d; }
    
    #practice-list { margin-top: 1rem; }
    .practice-item {
      padding: 0.75rem 1rem;
      background-color: #fef2f2;
      border: 1px solid #fee2e2;
      border-radius: 6px;
      margin-bottom: 0.5rem;
      cursor: pointer;
      transition: background-color 0.2s, box-shadow 0.2s;
      font-weight: 500;
      color: #991b1b;
    }
    .practice-item:hover {
      background-color: #fee2e2;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
    .explore-item {
      padding: 0.5rem 0.75rem;
      background-color: #f8fafc;
      border: 1px solid #e2e8f0;
      border-radius: 6px;
      margin-bottom: 0.5rem;
      cursor: pointer;
      transition: background-color 0.2s, box-shadow 0.2s;
      font-weight: 500;
      color: #334155;
    }
    .explore-item:hover {
        background-color: #e2e8f0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
  </style>
</head>
<body>
  <div id="map"></div>
  <div id="info-panel">
    <h2>Canadian Geography Challenge</h2>
    
    <div class="mode-switcher">
        <button id="explore-mode-btn" class="mode-btn active">Explore</button>
        <button id="quiz-mode-btn" class="mode-btn">Quiz</button>
        <button id="practice-mode-btn" class="mode-btn">Practice</button>
    </div>

    <div id="explore-panel" class="mode-panel active">
        <div id="info-content"><!-- Content loads here --></div>
    </div>

    <div id="quiz-panel" class="mode-panel">
        <div class="quiz-type-switcher">
            <button class="quiz-type-btn active" data-type="province">Provinces & Territories</button>
            <button class="quiz-type-btn" data-type="capital">Capitals</button>
        </div>
        <div id="question-box"><!-- Question will be loaded here --></div>
        <div id="result-box"></div>
        <div id="button-controls">
            <button id="hint-btn" class="game-btn">Hint ðŸ’¡</button>
            <button id="next-question-btn" class="game-btn">Next &rarr;</button>
            <button id="play-again-btn" class="game-btn">Play Again? â†»</button>
        </div>
    </div>

    <div id="practice-panel" class="mode-panel">
        <h3>Practice Bank</h3>
        <p>Here are the ones you've missed. Click one to find it on the map!</p>
        <div id="practice-list">Your practice bank is empty.</div>
    </div>
  </div>

  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo" crossorigin=""></script>
  <script>
    const map = L.map('map').setView([62, -98], 4);
    L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
      subdomains: 'abcd',
      maxZoom: 10,
      minZoom: 3,
    }).addTo(map);

    // --- DOM Elements ---
    const exploreModeBtn = document.getElementById('explore-mode-btn');
    const quizModeBtn = document.getElementById('quiz-mode-btn');
    const practiceModeBtn = document.getElementById('practice-mode-btn');
    const explorePanel = document.getElementById('explore-panel');
    const quizPanel = document.getElementById('quiz-panel');
    const practicePanel = document.getElementById('practice-panel');
    const infoContent = document.getElementById('info-content');
    const questionBox = document.getElementById('question-box');
    const resultBox = document.getElementById('result-box');
    const nextQuestionBtn = document.getElementById('next-question-btn');
    const playAgainBtn = document.getElementById('play-again-btn');
    const hintBtn = document.getElementById('hint-btn');
    const quizTypeBtns = document.querySelectorAll('.quiz-type-btn');
    const practiceList = document.getElementById('practice-list');

    // --- App State ---
    let geojson;
    let currentMode = 'explore';
    let currentQuizType = 'province';
    let isQuizActive = true;
    let currentQuestion = {};
    let incorrectGuesses = 0;
    let practiceBank = [];
    let justMissed = null;
    let guessedAnswers = [];

    // --- Data ---
    const provinceData = {
        'British Columbia': { capital: 'Victoria', population: '5.4M', province_hints: ["Stunning Pacific coastline and mountains.", "Hosted the 2010 Winter Olympics.", "Its capital city is on an island."], capital_hints: ["Named after a British queen.", "Located on the southern tip of Vancouver Island.", "Known for its beautiful gardens."] },
        'Alberta': { capital: 'Edmonton', population: '4.5M', province_hints: ["Home to the world's largest dinosaur model.", "Famous for oil sands and the Calgary Stampede.", "Home to Banff, Canada's oldest national park."], capital_hints: ["Known as the 'Gateway to the North'.", "Hosts a large summer festival called K-Days.", "Features the largest mall in North America."] },
        'Saskatchewan': { capital: 'Regina', population: '1.2M', province_hints: ["Known as the 'Land of Living Skies'.", "The only province with entirely man-made borders.", "Major producer of wheat and potash."], capital_hints: ["Home to the RCMP training academy.", "Named for Queen Victoria.", "Wascana Centre is a large urban park located here."] },
        'Manitoba': { capital: 'Winnipeg', population: '1.4M', province_hints: ["Known as the 'Polar Bear Capital of the World'.", "Located in the longitudinal centre of Canada.", "Its name means 'where the spirit lives' in Cree."], capital_hints: ["Located at the junction of two major rivers.", "Home to the Canadian Museum for Human Rights.", "The historic 'Forks' is a major landmark."] },
        'Ontario': { capital: 'Toronto', population: '15.3M', province_hints: ["Contains over 250,000 lakes.", "Canada's capital city, Ottawa, is located here.", "Home to the CN Tower."], capital_hints: ["Most populous city in Canada.", "Famous for its multiculturalism and diverse food scene.", "The CN Tower is a defining feature of its skyline."] },
        'Quebec': { capital: 'Quebec City', population: '8.7M', province_hints: ["Produces over 70% of the world's maple syrup.", "Canada's only predominantly French-speaking province.", "Its flag features a Fleur-de-lis."], capital_hints: ["A historic walled city.", "Overlooks the St. Lawrence River.", "Its winter carnival is world-famous."] },
        'New Brunswick': { capital: 'Fredericton', population: '800k', province_hints: ["Highest tides on Earth in the Bay of Fundy.", "The only officially bilingual province.", "Borders Quebec to the west and Nova Scotia to the east."], capital_hints: ["Located on the Saint John River.", "Known for its arts and culture scene.", "Home to the Beaverbrook Art Gallery."] },
        'Nova Scotia': { capital: 'Halifax', population: '1M', province_hints: ["Name is Latin for 'New Scotland'.", "Features the famous Cabot Trail scenic roadway.", "Home to Peggy's Cove lighthouse."], capital_hints: ["A major seaport on the Atlantic Ocean.", "Has a large, historic waterfront.", "Citadel Hill is a prominent historic site."] },
        'Prince Edward Island': { capital: 'Charlottetown', population: '175k', province_hints: ["Distinct red soil.", "Setting for 'Anne of Green Gables'.", "Smallest province by land area and population."], capital_hints: ["Known as the 'Birthplace of Confederation'.", "A major cruise ship port.", "Province House National Historic Site is here."] },
        'Newfoundland and Labrador': { capital: 'St. John\'s', population: '530k', province_hints: ["Canada's most easterly province.", "Has its own unique time zone.", "Famous for Gros Morne National Park."], capital_hints: ["One of the oldest cities in North America.", "Known for its colorful houses ('Jellybean Row').", "Signal Hill overlooks the city and harbour."] },
        'Yukon Territory': { capital: 'Whitehorse', population: '44k', province_hints: ["Home to Mount Logan, Canada's highest mountain.", "Famous for the Klondike Gold Rush.", "Westernmost of Canada's three territories."], capital_hints: ["Named after rapids that resembled a horse's mane.", "Located on the Yukon River.", "Home to the SS Klondike sternwheeler."] },
        'Northwest Territories': { capital: 'Yellowknife', population: '45k', province_hints: ["See the Aurora Borealis almost 240 nights a year.", "Known as the 'Diamond Capital of North America'.", "Borders Nunavut to the east and Yukon to the west."], capital_hints: ["Located on the shore of Great Slave Lake.", "Known for its houseboat community.", "Capital of its territory since 1967."] },
        'Nunavut': { capital: 'Iqaluit', population: '40k', province_hints: ["Canada's newest, largest, and northernmost territory.", "Name means 'our land' in Inuktitut.", "The official animal is the Canadian Inuit Dog."], capital_hints: ["Located on Baffin Island.", "Features a unique domed legislative building.", "Its name means 'place of many fish'."] }
    };
    
    let questions = [];
    let availableQuestions = [];
    
    // --- Utility ---
    function darkenColor(hex, percent) {
        hex = hex.replace('#', '');
        let r = parseInt(hex.substring(0, 2), 16);
        let g = parseInt(hex.substring(2, 4), 16);
        let b = parseInt(hex.substring(4, 6), 16);
        r = parseInt(r * (1 - percent / 100));
        g = parseInt(g * (1 - percent / 100));
        b = parseInt(b * (1 - percent / 100));
        r = (r < 0) ? 0 : r;
        g = (g < 0) ? 0 : g;
        b = (b < 0) ? 0 : b;
        const toHex = (c) => ('00' + c.toString(16)).slice(-2);
        return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
    }

    // --- Game Logic ---
    function setMode(mode) {
        currentMode = mode;
        exploreModeBtn.classList.toggle('active', mode === 'explore');
        quizModeBtn.classList.toggle('active', mode === 'quiz');
        practiceModeBtn.classList.toggle('active', mode === 'practice');
        explorePanel.classList.toggle('active', mode === 'explore');
        quizPanel.classList.toggle('active', mode === 'quiz');
        practicePanel.classList.toggle('active', mode === 'practice');

        if (mode === 'explore') {
            showAllCapitalsInExplorePanel();
        } else if (mode === 'quiz' && availableQuestions.length === 0) {
            resetQuiz();
        } else if(mode === 'quiz') {
            loadNewQuestion();
        } else if (mode === 'practice') {
            updatePracticePanel();
        }
        
        if(geojson) geojson.resetStyle();
    }
    
    function showAllCapitalsInExplorePanel() {
        let header = '<h3>Provinces, Territories & Capitals</h3><p style="margin-bottom: 1rem;">Click a name below to see it on the map!</p>';
        infoContent.innerHTML = header;

        const listContainer = document.createElement('div');
        
        for (const provinceName in provinceData) {
            const data = provinceData[provinceName];
            const item = document.createElement('div');
            item.className = 'explore-item';
            item.dataset.provinceName = provinceName;
            item.innerHTML = `<strong>${provinceName}:</strong> ${data.capital}`;
            listContainer.appendChild(item);
        }
        infoContent.appendChild(listContainer);
    }
    
    function setQuizType(type) {
        currentQuizType = type;
        quizTypeBtns.forEach(btn => btn.classList.toggle('active', btn.dataset.type === type));
        resetQuiz();
    }

    function resetQuiz() {
        if (currentQuizType === 'province') {
            questions = Object.keys(provinceData).map(name => ({
                type: 'province',
                answer: name,
                hints: provinceData[name].province_hints
            }));
        } else { // capital
            questions = Object.keys(provinceData).map(name => ({
                type: 'capital',
                question_subject: provinceData[name].capital,
                answer: name,
                hints: provinceData[name].capital_hints
            }));
        }
        availableQuestions = [...questions];
        practiceBank = [];
        guessedAnswers = [];
        if(geojson) geojson.resetStyle();
        loadNewQuestion();
    }

    function loadNewQuestion() {
        if (availableQuestions.length === 0) {
            questionBox.innerHTML = "You've answered all the questions!";
            resultBox.innerHTML = "<h2>Congratulations!</h2><p>You've completed the challenge!</p>";
            playAgainBtn.style.display = 'block';
            nextQuestionBtn.style.display = 'none';
            hintBtn.style.display = 'none';
            isQuizActive = false;
            return;
        }
        isQuizActive = true;
        justMissed = null;
        incorrectGuesses = 0;
        const questionIndex = Math.floor(Math.random() * availableQuestions.length);
        currentQuestion = availableQuestions.splice(questionIndex, 1)[0];
        
        if (currentQuestion.type === 'province') {
            questionBox.innerHTML = `Find <strong>${currentQuestion.answer}</strong>.`;
        } else {
            questionBox.innerHTML = `Which province or territory's capital is <strong>${currentQuestion.question_subject}</strong>?`;
        }
        
        resultBox.innerHTML = '<p>Click the correct location on the map!</p>';
        playAgainBtn.style.display = 'none';
        nextQuestionBtn.style.display = 'none';
        hintBtn.style.display = 'block';
        hintBtn.disabled = false;
        if (geojson) geojson.resetStyle();
    }
    
    function checkAnswer(provinceName) {
        if (!isQuizActive) return;

        if (provinceName === currentQuestion.answer) {
            isQuizActive = false;
            hintBtn.style.display = 'none';
            guessedAnswers.push(currentQuestion.answer);
            resultBox.innerHTML = `<p class="feedback-correct">Correct! It's ${provinceName}.</p>`;
            if (geojson) geojson.resetStyle();
            setTimeout(loadNewQuestion, 1500);
        } else {
            incorrectGuesses++;
            resultBox.innerHTML = `<p class="feedback-incorrect">Not quite! That was ${provinceName}. Try again! (${incorrectGuesses}/3)</p>`;
            showHint();

            if (incorrectGuesses >= 3) {
                isQuizActive = false;
                hintBtn.style.display = 'none';
                if (!practiceBank.includes(currentQuestion.answer)) {
                    practiceBank.push(currentQuestion.answer);
                }
                justMissed = currentQuestion.answer;
                geojson.resetStyle();
                
                resultBox.innerHTML = `<p class="feedback-incorrect">The correct answer was <strong>${currentQuestion.answer}</strong>. It's been added to your practice bank.</p>`;
                setTimeout(loadNewQuestion, 4000);
            }
        }
    }

    function showHint() {
        if (!isQuizActive) return;
        const hint = currentQuestion.hints[incorrectGuesses - 1] || currentQuestion.hints[currentQuestion.hints.length - 1];
        questionBox.innerHTML += `<br><small>Hint: ${hint}</small>`;
        if(incorrectGuesses >= currentQuestion.hints.length) {
            hintBtn.disabled = true;
        }
    }

    // --- Practice Panel Logic ---
    function updatePracticePanel() {
        practiceList.innerHTML = '';
        if (practiceBank.length === 0) {
            practiceList.innerHTML = 'Your practice bank is empty.';
            return;
        }
        practiceBank.sort().forEach(name => {
            const item = document.createElement('div');
            item.className = 'practice-item';
            item.textContent = name;
            item.addEventListener('click', () => {
                geojson.eachLayer(layer => {
                    if (layer.feature.properties.name === name) {
                        map.flyToBounds(layer.getBounds().pad(0.2));
                        layer.setStyle({ fillColor: '#f59e0b', fillOpacity: 0.9 });
                        setTimeout(() => geojson.resetStyle(layer), 2000);
                    }
                });
            });
            practiceList.appendChild(item);
        });
    }

    // --- Map Styling and Interaction ---
    const palette = ['#e57373', '#ffb74d', '#fff176', '#aed581', '#64b5f6', '#ba68c8', '#ff8a65', '#f06292', '#dce775', '#4dd0e1', '#bcaaa4', '#a5d6a7', '#ce93d8'];
    const provinceNames = Object.keys(provinceData);

    function style(feature) {
        const name = feature.properties.name;
        
        if (currentMode === 'practice') {
            return {
                fillColor: practiceBank.includes(name) ? '#ef4444' : '#e0e0e0',
                weight: practiceBank.includes(name) ? 2 : 0.5,
                color: 'white',
                fillOpacity: practiceBank.includes(name) ? 0.8 : 0.5
            };
        }
        
        if (name === justMissed) {
             return { fillColor: '#ef4444', weight: 2, color: 'white', fillOpacity: 0.9 };
        }

        let fillColor = '#bdbdbd';
        if (currentMode === 'explore') {
            const idx = provinceNames.indexOf(name);
            fillColor = idx >= 0 ? palette[idx % palette.length] : '#bdbdbd';
        } else if (currentMode === 'quiz') {
            if (guessedAnswers.includes(name)) {
                const idx = provinceNames.indexOf(name);
                fillColor = idx >= 0 ? palette[idx % palette.length] : '#bdbdbd';
            }
        }
      
        return { 
            fillColor: fillColor,
            weight: 2, opacity: 1, color: 'white', fillOpacity: 0.7 
        };
    }

    function highlightFeature(e) {
      if (currentMode === 'quiz' && !isQuizActive) return;
      if (currentMode === 'practice' && !practiceBank.includes(e.target.feature.properties.name)) return;
      
      const layer = e.target;
      const currentFillColor = layer.options.fillColor;
      const darkerBorderColor = darkenColor(currentFillColor, 40);

      layer.setStyle({ weight: 4, color: darkerBorderColor, dashArray: '', fillOpacity: 0.85 });
      layer.bringToFront();
    }

    function resetHighlight(e) { geojson.resetStyle(e.target); }
    
    function onMapClick(featureProps) {
        const name = featureProps.name;
        if (currentMode === 'explore' || currentMode === 'practice') {
            const data = provinceData[name];
            if(data) {
                const backButton = `<button id="back-to-list-btn" class="mode-btn" style="margin-top: 1rem; width: 100%; background-color: #6b7280; color: white;">&larr; Back to Full List</button>`;
                infoContent.innerHTML = `<h3>${name}</h3><p><strong>Capital:</strong> ${data.capital}</p><p><strong>Population:</strong> ~${data.population}</p>${backButton}`;
                
                // Add event listener for the new button, only if in explore mode
                if (currentMode === 'explore') {
                    document.getElementById('back-to-list-btn').addEventListener('click', showAllCapitalsInExplorePanel);
                }
            }
        } else if (currentMode === 'quiz') {
            checkAnswer(name);
        }
    }

    function onEachFeature(feature, layer) {
      layer.on({ mouseover: highlightFeature, mouseout: resetHighlight, click: () => onMapClick(feature.properties) });
    }
    
    // --- Event Listeners ---
    exploreModeBtn.addEventListener('click', () => setMode('explore'));
    quizModeBtn.addEventListener('click', () => setMode('quiz'));
    practiceModeBtn.addEventListener('click', () => setMode('practice'));
    playAgainBtn.addEventListener('click', resetQuiz);
    hintBtn.addEventListener('click', showHint);
    quizTypeBtns.forEach(btn => btn.addEventListener('click', () => setQuizType(btn.dataset.type)));

    infoContent.addEventListener('click', (e) => {
        if (currentMode !== 'explore') return;
        const target = e.target.closest('.explore-item');
        if (target && target.dataset.provinceName) {
            const provinceName = target.dataset.provinceName;
            geojson.eachLayer(layer => {
                if (layer.feature.properties.name === provinceName) {
                    map.flyToBounds(layer.getBounds().pad(0.2));
                    // Temporarily highlight the clicked province
                    layer.setStyle({ fillColor: '#f59e0b', fillOpacity: 0.9 });
                    setTimeout(() => {
                       geojson.resetStyle(layer);
                    }, 2000);
                }
            });
        }
    });

    // --- Initial Load ---
    fetch('https://cdn.jsdelivr.net/gh/codeforgermany/click_that_hood@master/public/data/canada.geojson')
      .then(res => res.json())
      .then(data => { 
        geojson = L.geoJson(data, { style, onEachFeature }).addTo(map); 
        setMode('explore');
      })
      .catch(err => { 
        console.error('GeoJSON load error:', err); 
        infoContent.innerHTML = '<p>Error loading map data. Please refresh.</p>'; 
      });
  </script>
</body>
</html>




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Our Land Vocabulary Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }
        /* Style for incorrect guess animation */
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }
        .shake {
            animation: shake 0.3s ease-in-out;
        }
        #copy-notification {
            transition: opacity 0.5s, transform 0.5s;
        }
    </style>
</head>
<body class="bg-gray-100">

    <div class="container mx-auto px-2 py-2">
        <header class="text-center mb-3 flex justify-between items-center">
             <div class="w-10"></div> <!-- Spacer -->
            <div class="bg-green-600 text-white inline-block px-6 py-2 rounded-xl shadow-lg">
                <h1 class="text-2xl font-bold">Our Land</h1>
            </div>
            <button id="copy-code-btn" title="Copy Code to Share" class="text-gray-500 hover:text-green-600 transition-colors p-2 rounded-full hover:bg-gray-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
            </button>
        </header>

        <section id="hint-section" class="text-center mb-4 bg-white p-3 rounded-xl shadow-md min-h-[60px] flex items-center justify-center">
             <p id="hint-text" class="text-lg font-semibold text-gray-700">Click start to play!</p>
        </section>

        <main id="card-container" class="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 gap-2">
            <!-- Cards will be dynamically inserted here -->
        </main>
        
        <footer id="footer-section" class="text-center mt-4">
            <button id="start-button" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-5 text-lg rounded-lg shadow-md transition-transform transform hover:scale-105">Start Game</button>
        </footer>
    </div>
    
    <!-- Notification for copy success -->
    <div id="copy-notification" class="fixed bottom-5 right-5 bg-gray-800 text-white py-2 px-4 rounded-lg shadow-lg opacity-0 transform translate-y-2">
        Code copied to clipboard!
    </div>


    <script>
        const copyCodeBtn = document.getElementById('copy-code-btn');
        const notification = document.getElementById('copy-notification');

        copyCodeBtn.addEventListener('click', () => {
            // Get the entire HTML content of the page
            const codeToCopy = document.documentElement.outerHTML;
            
            // Use a temporary textarea to copy the content
            const textarea = document.createElement('textarea');
            textarea.value = codeToCopy;
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);

            // Show a notification
            notification.classList.remove('opacity-0', 'translate-y-2');
            setTimeout(() => {
                notification.classList.add('opacity-0', 'translate-y-2');
            }, 2000); // Hide after 2 seconds
        });


        const cardContainer = document.getElementById('card-container');
        const hintText = document.getElementById('hint-text');
        const startButton = document.getElementById('start-button');
        const footerSection = document.getElementById('footer-section');

        const cardsData = [
            { term: 'Historical Site', image: 'https://cdn.jsdelivr.net/npm/openmoji@14.0.0/color/svg/1F3DB.svg', definition: 'A special place that is important to our past.' },
            { term: 'Landforms', image: 'https://cdn.jsdelivr.net/npm/openmoji@14.0.0/color/svg/1F3DE.svg', definition: 'The natural shapes of the land, like mountains, hills, or flat prairies.' },
            { term: 'Landmark', image: 'https://cdn.jsdelivr.net/npm/openmoji@14.0.0/color/svg/1F5FC.svg', definition: 'An important place or building that is easy to recognize.' },
            { term: 'Natural Resources', image: 'https://cdn.jsdelivr.net/npm/openmoji@14.0.0/color/svg/1F333.svg', definition: 'Things from nature that people use, like water, trees, and oil.' },
            { term: 'Physical Features', image: 'https://cdn.jsdelivr.net/npm/openmoji@14.0.0/color/svg/26F0.svg', definition: 'The different parts of the land you can see, like rivers, lakes, and mountains.' },
            { term: 'Political Boundaries', image: 'https://cdn.jsdelivr.net/npm/openmoji@14.0.0/color/svg/1F5FA.svg', definition: 'The lines on a map that show where a province or country begins and ends.' },
            { term: 'Territory', image: 'https://cdn.jsdelivr.net/npm/openmoji@14.0.0/color/svg/1F3DD.svg', definition: 'An area of land that belongs to a group of people.' },
            { term: 'Treaty', image: 'https://cdn.jsdelivr.net/npm/openmoji@14.0.0/color/svg/1F4DC.svg', definition: 'A special promise or agreement made between groups of people, like First Nations and the government.' },
            { term: 'Settlement', image: 'https://cdn.jsdelivr.net/npm/openmoji@14.0.0/color/svg/1F3E0.svg', definition: 'A community or place where people build homes and live.' },
            { term: 'Province', image: 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/Alberta_in_Canada_2.svg/330px-Alberta_in_Canada_2.svg.png', definition: 'A large area in Canada, like Alberta, that has its own government.' },
            { term: 'Physical region', image: 'https://cdn.jsdelivr.net/npm/openmoji@14.0.0/color/svg/1F3DC.svg', definition: 'A big area of land that has special features, like mountains or plains.' },
            { term: 'Map', image: 'https://cdn.jsdelivr.net/npm/openmoji@14.0.0/color/svg/1F5FA.svg', definition: 'A drawing that shows where places are on Earth.' }
        ];

        let shuffledCards = [];
        let currentCardIndex = 0;
        let lockBoard = false;

        const borderColors = ['border-green-500', 'border-blue-500', 'border-orange-500', 'border-red-500', 'border-purple-500', 'border-cyan-500', 'border-yellow-500', 'border-lime-500'];

        function shuffle(array) {
            array.sort(() => Math.random() - 0.5);
        }

        function startGame() {
            shuffle(cardsData);
            shuffledCards = cardsData;
            currentCardIndex = 0;
            lockBoard = false;
            
            displayCards();
            displayNextHint();

            startButton.textContent = "Restart Game";
            footerSection.innerHTML = ''; // Clear footer after starting
            footerSection.appendChild(startButton);
        }

        function displayNextHint() {
            if (currentCardIndex < shuffledCards.length) {
                hintText.textContent = shuffledCards[currentCardIndex].definition;
            } else {
                hintText.textContent = "ðŸŽ‰ You found them all! ðŸŽ‰";
                lockBoard = true;
            }
        }

        function displayCards() {
            cardContainer.innerHTML = '';
            const displayOrderCards = [...shuffledCards];
            shuffle(displayOrderCards);

            displayOrderCards.forEach((card, index) => {
                const colorClass = borderColors[index % borderColors.length];
                const cardElement = document.createElement('div');
                cardElement.classList.add('card', 'h-40', 'bg-white', 'rounded-xl', 'border-4', colorClass, 'shadow-md', 'overflow-hidden', 'cursor-pointer', 'relative');
                cardElement.dataset.term = card.term;
                
                cardElement.innerHTML = `
                    <div class="flex items-center justify-center h-2/3 p-1">
                        <img src="${card.image}" alt="${card.term}" class="max-h-full max-w-full">
                    </div>
                    <div class="text-center bg-gray-50 py-1 h-1/3 flex items-center justify-center px-1">
                        <h2 class="text-sm font-semibold text-gray-800">${card.term}</h2>
                    </div>
                    <!-- Overlay for correct answers -->
                    <div class="absolute inset-0 bg-green-500 bg-opacity-75 flex items-center justify-center hidden is-correct-overlay">
                        <svg class="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7"></path></svg>
                    </div>
                `;
                cardElement.addEventListener('click', handleCardClick);
                cardContainer.appendChild(cardElement);
            });
        }
        
        function handleCardClick(e) {
            if (lockBoard) return;
            const clickedCard = e.currentTarget;
            if (clickedCard.classList.contains('is-correct')) return;

            const correctTerm = shuffledCards[currentCardIndex].term;

            if (clickedCard.dataset.term === correctTerm) {
                // Correct guess
                clickedCard.classList.add('is-correct', 'pointer-events-none');
                const overlay = clickedCard.querySelector('.is-correct-overlay');
                if (overlay) {
                    overlay.classList.remove('hidden');
                }
                currentCardIndex++;
                setTimeout(displayNextHint, 700); // Wait a moment to show feedback
            } else {
                // Incorrect guess
                lockBoard = true;
                clickedCard.classList.add('shake');
                setTimeout(() => {
                    clickedCard.classList.remove('shake');
                    lockBoard = false;
                }, 300);
            }
        }
        
        startButton.addEventListener('click', startGame);

    </script>
</body>
</html>
